[alias]
  # View abbreviated SHA, description, and history graph of latest commits
  l = log -n 24 --graph --pretty=oneline --abbrev-commit
  ll = log -n 48 --graph --pretty=format:'%C(auto)%h%d %s %C(green)%an%C(reset) (%cr)' --abbrev-commit --date=relative
  lll = log --all --graph --pretty=format:'%C(auto)%h%d %s %C(green)%an%C(reset) (%cr)' --abbrev-commit --date=relative

  # View the current working tree status
  s = status

  # Show changes between commits, commit and working tree, etc
  d = diff

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # Pull in remote changes for the current repository and all its submodules
  pr = !"git pull; git submodule foreach git pull origin master"

  # Clone a repository including all submodules
  cr = clone --recursive

  # Commit all changes
  ca = !git add -A && git commit -av

  # Switch to a branch, creating it if necessary
  go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

  # Checkout Shortcut
  co = checkout

  # Show verbose output about tags, branches or remotes
  br = branch
  tags = tag -l
  remotes = remote -v
  branches = branch -a

  # List aliases
  aliases = config --get-regexp alias

  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Remove the old tag with this name and tag the latest commit with it.
  retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

  # Exclude package-lock from show and diff
  diff-no-lock = "!git diff -- . ':(exclude)package-lock.json' ':(exclude)**/package-lock.json'"
  show-no-lock = "!f() { git show $1 -- . ':(exclude)package-lock.json' ':(exclude)**/package-lock.json'; }; f"

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Remove branches that have already been merged with master
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  # Merge GitHub pull request on top of the current branch or,
  # if a branch name is specified, on top of the specified branch
  mpr = "!f() { \
    declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
    declare branch=\"${2:-$currentBranch}\"; \
    if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
      git fetch origin refs/pull/$1/head:pr/$1 && \
      git checkout -B $branch && \
      git rebase $branch pr/$1 && \
      git checkout -B $branch && \
      git merge pr/$1 && \
      git branch -D pr/$1 && \
      git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
    fi \
  }; f"

  # Change commits name and author
  # git change-commits GIT_AUTHOR_NAME "prev name" "new name"
  # git change-commits GIT_AUTHOR_EMAIL "prev@email.com" "new@email.com" HEAD~10..HEAD
  change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch --env-filter \"if [[ \\\"$`echo $VAR`\\\" = '$OLD' ]]; then export $VAR='$NEW'; fi\" $@; }; f "

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

[core]
  editor = nvim
  # editor = helix

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on OS X
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # Prevent showing files whose names contain non-ASCII symbols as unversioned.
  # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
  precomposeunicode = false

  # Speed up commands involving untracked files such as `git status`.
  # https://git-scm.com/docs/git-update-index#_untracked_cache
  untrackedCache = true

[color]
  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
  ui = auto

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold # diff info
  frag = magenta bold # line info
  old = red # deletions
  new = green # additions

[color "status"]
  added = green
  changed = yellow bold
  untracked = cyan

[init]
  defaultBranch = main

# [commit]
  # https://help.github.com/articles/signing-commits-using-gpg/
  # gpgsign = true

[diff]
  # Detect copies as well as renames
  renames = copies
  colorMoved = default

[diff "bin"]
  # Use `hexdump` to diff binary files
  textconv = hexdump -v -C

[help]
  autocorrect = 0

[merge]
  log = true
  tool = nvimdiff # cq
  conflictStyle = zdiff3

[mergetool]
  prompt = false
  keepBackup = false

[mergetool "nvimdiff"]
  layout = "LOCAL,REMOTE / MERGED"
  # layout = "LOCAL,BASE,REMOTE / MERGED"
  # cmd = nvim -n -c "DiffviewOpen" "$MERGE"

[push]
  default = simple
  followTags = true

[pull]
  rebase = true

[rebase]
  autoStash = true

# git >= 2.37.0
[add.interactive]
  useBuiltin = false

# https://github.com/dandavison/delta
# A syntax-highlighting pager for git, diff, and grep output
[core]
  pager = delta

[interactive]
  diffFilter = delta --color-only

[delta]
  tabs = 2 # tab len
  dark = true # dark/light
  navigate = true # use n/N keys
  side-by-side = true # split diff
  line-numbers = true # show line number
  syntax-theme = Dracula # syntax theme
  keep-plus-minus-markers = false # toggle -/+ markers

# git diff | delta
# git diff | nvim -d
# git diff | bat -ldiff
