#!/usr/bin/env bash

export BAK_DIR=~/.dot-bak

function rmbackup() {
  rm -rf $BAK_DIR
}

function backup() {
  local now
  now=$(date +'%Y%m%d%H%M%S')
  local bak_dir=$BAK_DIR/$now

  mkdir -p "$bak_dir"

  [ -f ~/.bashrc ] && cp ~/.bashrc "$bak_dir"
  [ -f ~/.bash_profile ] && cp ~/.bash_profile "$bak_dir"
  [ -f ~/.inputrc ] && cp ~/.inputrc "$bak_dir"
  [ -f ~/.gitconfig ] && cp ~/.gitconfig "$bak_dir"
  [ -f ~/.vimrc ] && cp ~/.vimrc "$bak_dir"
  [ -f ~/.config/nvim/init.lua ] && cp ~/.config/nvim/init.lua "$bak_dir"
}

function mkd() {
  mkdir -p "$@" && cd "$_" || return
}

function pretty_path() {
  # shellcheck disable=SC2001
  echo "$PATH" | sed "s/:/\n/g"
}

function batdiff() {
  git diff | bat -ldiff
  # git diff --name-only --diff-filter=d | xargs bat --diff
}

function setup_npm_global_dir() {
  mkdir -p "$HOME/.npm"
  npm config set prefix "$HOME/.npm"

  # ./bash/.exports
  # export PATH=$HOME/.npm/bin:$PATH

  # alternative with env var only
  # export NPM_CONFIG_PREFIX=$HOME/.npm
}

function clean_neovim_dirs() {
  if [[ $1 = "-v" || $1 == "--verbose" ]]; then
    echo "DEL ~/.cache/nvim"
    echo "DEL ~/.local/share/nvim"
    echo "DEL ~/.local/state/nvim"
    echo "DEL ~/.config/nvim/plugin"
    echo "DEL ~/.config/nvim/lazy-lock.json"
  fi

  rm -rf ~/.cache/nvim
  rm -rf ~/.local/share/nvim
  rm -rf ~/.local/state/nvim
  rm -rf ~/.config/nvim/plugin
  rm -rf ~/.config/nvim/lazy-lock.json
}

function show_colors() {
  for fgbg in 38 48; do # Foreground / Background
    for color in {0..255}; do # Colors
      # Display the color
      printf "\e[${fgbg};5;%sm  %3s  \e[0m" "$color" "$color"
      # Display 6 colors per lines
      if [ $((("$color" + 1) % 6)) == 4 ]; then
        echo # New line
      fi
    done
    echo # New line
  done
}

# Show all the names (CNs and SANs) listed in the SSL certificate for a given domain
function getcertnames() {
  if [ -z "${1}" ]; then
    echo "ERROR: No domain specified.";
    return 1;
  fi;

  local domain="${1}";
  echo "Testing ${domain} â€¦";
  echo ""; # newline

  local tmp
  tmp=$(echo -e "GET / HTTP/1.0\nEOT" | openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

  if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
    local certText
    certText=$(echo "${tmp}" | openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, no_serial, no_sigdump, no_signame, no_validity, no_version");
    echo "Common Name:";
    echo ""; # newline
    echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
    echo ""; # newline
    echo "Subject Alternative Name(s):";
    echo ""; # newline
    echo "${certText}" | grep -A 1 "Subject Alternative Name:" | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
    return 0;
  else
    echo "ERROR: Certificate not found.";
    return 1;
  fi;
}
