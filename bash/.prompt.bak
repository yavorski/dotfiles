#!/usr/bin/env bash

# ------------------------------------------------------------------- #
# Legacy - NOT SOURCED
# ------------------------------------------------------------------- #

# Lambda addition (+)
# * `Œª` - greek small letter lamda
# * `ùù∫` - mathematical sans-serif bold small lamda

# ------------------------------------------------------------------- #
# ------------------------------------------------------------------- #
if tput setaf 1 &> /dev/null; then
  tput sgr0; # reset colors
  bold=$(tput bold);
  reset=$(tput sgr0);
  black=$(tput setaf 0);
  blue=$(tput setaf 33);
  cyan=$(tput setaf 51);
  green=$(tput setaf 35);
  orange=$(tput setaf 202);
  purple=$(tput setaf 135);
  red=$(tput setaf 197);
  violet=$(tput setaf 61);
  white=$(tput setaf 15);
  yellow=$(tput setaf 226);
else
  bold='';
  reset="\e[0m";
  black="\e[1;30m";
  blue="\e[1;34m";
  cyan="\e[1;36m";
  green="\e[1;32m";
  orange="\e[1;33m";
  purple="\e[1;35m";
  red="\e[1;31m";
  violet="\e[1;35m";
  white="\e[1;37m";
  yellow="\e[1;33m";
fi;


# ------------------------------------------------------------------- #
# ------------------------------------------------------------------- #
git_prompt() {
  local s='';
  local branchName='';

  # Check if the current directory is in a Git repository.
  git rev-parse --is-inside-work-tree &>/dev/null || return;

  # Check for what branch we're on.
  # Get the short symbolic ref. If HEAD isn't a symbolic ref, get a
  # tracking remote branch or tag. Otherwise, get the
  # short SHA for the latest commit, or give up.
  branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
    git describe --all --exact-match HEAD 2> /dev/null || \
    git rev-parse --short HEAD 2> /dev/null || \
    echo '(unknown)')";

  # Early exit for Chromium & Blink repo, as the dirty check takes too long.
  # https://github.com/paulirish/dotfiles/blob/dd33151f/.bash_prompt#L110-L123
  repoUrl="$(git config --get remote.origin.url)";
  if grep -q 'chromium/src.git' <<< "${repoUrl}"; then
    s+='*';
  else
    # Check for uncommitted changes in the index.
    if ! $(git diff --quiet --ignore-submodules --cached); then
      s+='+';
    fi;
    # Check for unstaged changes.
    if ! $(git diff-files --quiet --ignore-submodules --); then
      s+='!';
    fi;
    # Check for untracked files.
    if [ -n "$(git ls-files --others --exclude-standard)" ]; then
      s+='?';
    fi;
    # Check for stashed files.
    if $(git rev-parse --verify refs/stash &>/dev/null); then
      s+='$';
    fi;
  fi;

  [ -n "${s}" ] && s=" [${s}]";

  echo -e "${1}${branchName}${2}${s}";
}


# ------------------------------------------------------------------- #
# ------------------------------------------------------------------- #
lambda_prompt() {
  local EXIT="$?"

  # add exit code, if non 0
  if [[ $EXIT != 0 ]]; then
    statusCode="[${bold}${red}${EXIT}${reset}] ";
  else
    statusCode="";
  fi;

  # highlight the user name when logged in as root.
  if [[ "${USER}" == "root" ]]; then
    userStyle="${bold}${red}";
  else
    userStyle="${cyan}";
  fi;

  # highlight the hostname when connected via SSH.
  if [[ "${SSH_TTY}" ]]; then
    hostStyle="${bold}${red}";
  else
    hostStyle="${yellow}";
  fi;

  # set the terminal title and prompt.
  PS1="\[\033]0;\W\007\]"; # working directory base name

  PS1+="\[${bold}\]\n"; # newline

  PS1+="\[${statusCode}\]"; # status code

  PS1+="\[${userStyle}\]\u"; # username

  PS1+="\[${white}\] at ";

  PS1+="\[${hostStyle}\]\h"; # host

  PS1+="\[${white}\] in ";

  PS1+="\[${purple}\]\w"; # working directory full path

  PS1+="\$(git_prompt \"\[${white}\] on \[${red}\]\" \"\[${blue}\]\")"; # Git repository details

  PS1+="\n";

  PS1+="\[${white}\]ùù∫ \[${reset}\]"; # `$` (and reset color)

  export PS1;
}


# ------------------------------------------------------------------- #
# ------------------------------------------------------------------- #
simple_prompt() {
  PS2="\[${yellow}\]‚Üí \[${reset}\]";
  PS2='[\u@\h \w] ‚Üí '
  export PS2;
}


# ------------------------------------------------------------------- #
# ------------------------------------------------------------------- #
starship_prompt() {
  eval "$(starship init bash)"
}


# ------------------------------------------------------------------- #
# Export default prompt
# ------------------------------------------------------------------- #
export PROMPT_COMMAND=lambda_prompt


# ------------------------------------------------------------------- #
# Init starship
# ------------------------------------------------------------------- #
eval "$(starship init bash)"
